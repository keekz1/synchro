datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole{
  ADMIN
  USER
}

model User {
  id                     String         @id @default(cuid()) @map("_id")
  name                   String
  email                  String         @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   UserRole       @default(USER)
  friendRequestsSent     FriendRequest[] @relation("Sender")
  friendRequestsReceived FriendRequest[] @relation("Receiver")
  accounts               Account[]
  friendshipsAsUserA     Friendship[]   @relation("Friendship_userA")
  friendshipsAsUserB     Friendship[]   @relation("Friendship_userB")
  
  // Add these fields to complete the Message relation
  messagesSent           Message[]      @relation("MessagesSent")
  messagesReceived       Message[]      @relation("MessagesReceived")
}


model Friendship {
  id       String @id @default(cuid()) @map("_id")
  userAId  String
  userBId  String
  userA    User   @relation("Friendship_userA", fields: [userAId], references: [id])
  userB    User   @relation("Friendship_userB", fields: [userBId], references: [id])
  createdAt DateTime @default(now())

  // Ensure uniqueness to prevent duplicate friendships
  @@unique([userAId, userBId])
}

model FriendRequest {
  id          String   @id @default(cuid()) @map("_id")
  senderId    String
  receiverId  String
  status      String   // "pending", "accepted", or "rejected"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender      User     @relation("Sender", fields: [senderId], references: [id])
  receiver    User     @relation("Receiver", fields: [receiverId], references: [id])
}

model Message {
  id          String   @id @default(cuid()) @map("_id")
  senderId    String
  receiverId  String
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   @default("sending") // Add this field for message status

  sender      User     @relation("MessagesSent", fields: [senderId], references: [id])
  receiver    User     @relation("MessagesReceived", fields: [receiverId], references: [id])
}

model Account {
  id                 String   @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}