datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  Software_Engineer
  Backend_Developer
  Frontend_Developer
  Full_Stack_Developer
  Mobile_Developer
  Devops_Engineer
  Machine_Learning_Engineer
  Ai_Engineer
  Cloud_Architect
  Site_Reliability_Engineer
  Embedded_Systems_Engineer
  Firmware_Engineer
  Game_Developer
  Security_Engineer

  Data_Scientist
  Data_Analyst
  Business_Intelligence_Analyst
  Data_Engineer
  Research_Scientist
  ML_Ops_Engineer
  Nlp_Engineer
  Ai_Researcher

  Ux_Designer
  Ui_Designer
  Product_Designer
  Graphic_Designer
  Interaction_Designer
  Visual_Designer
  Design_Researcher

  Product_Manager
  Project_Manager
  Scrum_Master
  Technical_Program_Manager
  Tech_Lead
  Engineering_Manager
  Agile_Coach

  Qa_Tester
  Test_Automation_Engineer
  Quality_Assurance_Engineer

  Business_Analyst
  Operations_Manager
  Customer_Success_Manager
  Customer_Support_Specialist
  Sales_Engineer
  Account_Manager

  Marketing_Specialist
  Growth_Hacker
  Content_Strategist
  Seo_Specialist
  Social_Media_Manager
  Digital_Marketing_Manager

  System_Administrator
  It_Support
  Network_Engineer
  Help_Desk_Technician
  Database_Administrator
  Security_Analyst
  Cybersecurity_Specialist

  Technical_Writer
  Content_Writer
  Ux_Writer
  Documentation_Specialist

  Researcher
  Lecturer
  Academic_Coordinator
  Education_Technologist

  Bioinformatics_Scientist
  Computational_Biologist
  Medical_Data_Analyst

  Waiter
  Waitress
  Chef
  Sous_Chef
  Line_Cook
  Kitchen_Assistant
  Restaurant_Manager
  Barista
  Bartender
  Host
  Hostess
  Dishwasher
  Sommelier
  Pastry_Chef
  Food_Runner
  Catering_Staff

  Cto
  Cio
  Chief_Product_Officer
  Vp_Of_Engineering
  Founder
  Co_Founder

  Freelance_Developer
  Remote_Engineer
  Contractor

  Intern
  Junior_Developer
  Graduate_Software_Engineer

  Tech_Enthusiast
  Hacker
  Open_Source_Contributor
  Mentor
  Volunteer
  Entrepreneur
  Other
  HR
USER
ADMIN
}

enum ExperienceLevel {
  LESS_THAN_1_YEAR
  ONE_TO_2_YEARS
  THREE_TO_5_YEARS
  FIVE_PLUS_YEARS
}

model User {
  id                     String         @id @default(cuid()) @map("_id")
  name                   String
  email                  String         @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   UserRole       @default(USER)
  
  friendRequestsSent     FriendRequest[] @relation("Sender")
  friendRequestsReceived FriendRequest[] @relation("Receiver")
  accounts Account[] @relation("AccountToUser", onDelete: Cascade)
  hrPreferences HRPreferences[]  

  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  friendshipsAsUserA     Friendship[]   @relation("Friendship_userA")
  friendshipsAsUserB     Friendship[]   @relation("Friendship_userB")
  
   messagesSent           Message[]      @relation("MessagesSent")
  messagesReceived       Message[]      @relation("MessagesReceived")
  skills                 String[]     
    age        Int?               

  experience   ExperienceLevel?  
  educationLevel String[] @default([])  
  openToWork             Boolean        @default(false)  

  rejectedRequestsSent     RejectedRequest[] @relation("rejectedBySender")
  rejectedRequestsReceived RejectedRequest[] @relation("rejectedByReceiver")

}

model Friendship {
  id       String @id @default(cuid()) @map("_id")
  userAId  String
  userBId  String
  userA    User   @relation("Friendship_userA", fields: [userAId], references: [id])
  userB    User   @relation("Friendship_userB", fields: [userBId], references: [id])
  createdAt DateTime @default(now())

   @@unique([userAId, userBId])

}

model FriendRequest {
  id          String   @id @default(cuid()) @map("_id")
  senderId    String
  receiverId  String
  status      String    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender      User     @relation("Sender", fields: [senderId], references: [id])
  receiver    User     @relation("Receiver", fields: [receiverId], references: [id])
}



model RejectedRequest {
  id         String   @id @default(cuid()) @map("_id")
  senderId   String
  receiverId String
  rejectedAt DateTime @default(now())
  
  sender     User     @relation("rejectedBySender", fields: [senderId], references: [id])
  receiver   User     @relation("rejectedByReceiver", fields: [receiverId], references: [id])
  
  @@unique([senderId, receiverId])
}

model Message {
  id          String   @id @default(cuid()) @map("_id")
  senderId    String
  receiverId  String
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   @default("sending")  

  sender      User     @relation("MessagesSent", fields: [senderId], references: [id])
  receiver    User     @relation("MessagesReceived", fields: [receiverId], references: [id])
}

model Account {
  id                 String   @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @map("_id") @default(cuid())   
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken{
  id String @id @map("_id") @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique ([email,token])

}

model TwoFactorToken{
  id String @id @map("_id") @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique ([email,token])

}

model TwoFactorConfirmation {
  id     String @id @map("_id") @default(cuid())
  userId String                     
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
enum LocationType {
  REMOTE
  HYBRID
  ONSITE
}
model HRPreferences {
  id          String     @id @default(cuid()) @map("_id")
  userId      String
  name        String
  requiredSkills String[]
  minExperience Int
  locationType  String
  educationLevel String[]
  minAge        Int?
  maxAge        Int?
  role          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

   user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
   @@unique([id, userId])
}
model DeleteReason {
  id        String    @id @default(cuid()) @map("_id")
  userId    String
  reason    String
  createdAt DateTime @default(now())
}
